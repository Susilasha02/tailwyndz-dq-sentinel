name: DQ Sentinel

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  run-dq:
    runs-on: ubuntu-latest
    env:
      GH_USER: Susilasha02
      REPONAME: tailwyndz-dq-sentinel
      BRANCH_WITH_CLEANED: cleaned-data
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set PYTHONPATH to repo root
        run: echo "PYTHONPATH=${{ github.workspace }}" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.x'
          check-latest: false

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --prefer-binary -r requirements.txt || pip install -r requirements.txt
          pip install pytest

      - name: Prepare cleaned data (download from cleaned-data branch)
        run: |
          set -e
          mkdir -p data/cleaned
          cd data

          FILES=(
            "cleaned/sales_weekly_dupes.csv"
            "cleaned/sales_weekly_partial_backfill.csv"
            "cleaned/sales_weekly_schema_v2.csv"
            "sales_weekly.csv"
            "sales_weekly_level_shift.csv"
            "sales_weekly_season_break.csv"
            "sales_weekly_tz_shift.csv"
            "sales_weekly_unit_mixup.csv"
            "sales_weekly_partial_backfill.csv"
            "calendar.csv"
            "promos.csv"
          )

          base="https://raw.githubusercontent.com/${GH_USER}/${REPONAME}/${BRANCH_WITH_CLEANED}/"

          echo "Downloading cleaned files from branch: ${BRANCH_WITH_CLEANED}"
          for f in "${FILES[@]}"; do
            url="${base}${f}"
            dest="$(basename "$f")"
            echo "Attempting: $url -> data/$dest"
            if curl --fail --show-error -s -o "${dest}" "${url}"; then
              echo "Downloaded ${dest}"
            else
              echo "Warning: could not download ${url} (file may not exist in branch)."
            fi
          done

          cd ..

      - name: Run unit tests
        run: pytest -q

      - name: Run DQ sentinel (uses data/cleaned if available)
        run: |
          python src/dq_sentinel.py --data-dir data/cleaned --out-dir reports/ci --calendar data/calendar.csv --promos data/promos.csv --pattern "sales_weekly*.csv"

      - name: Upload reports artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dq-reports
          path: reports/ci